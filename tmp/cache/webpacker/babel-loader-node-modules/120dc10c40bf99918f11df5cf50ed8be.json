{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n// app/javascript/controllers/chart_controller.js\nimport { Controller } from \"stimulus\";\nimport Chart from \"chart.js/auto\";\n\nvar _default = /*#__PURE__*/function (_Controller) {\n  _inherits(_default, _Controller);\n\n  var _super = _createSuper(_default);\n\n  function _default() {\n    _classCallCheck(this, _default);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(_default, [{\n    key: \"connect\",\n    value: function connect() {\n      console.log(this.chartTarget, this.element);\n      var labels = this.element.dataset.labels ? JSON.parse(this.element.dataset.labels) : [];\n      var data = this.element.dataset.data ? JSON.parse(this.element.dataset.data) : [];\n\n      if (labels.length && data.length) {\n        var ctx = this.chartTarget.getContext(\"2d\");\n        new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: labels,\n            datasets: [{\n              label: 'Número de Funcionários',\n              data: data,\n              backgroundColor: 'rgba(75, 192, 192, 0.2)',\n              borderColor: 'rgba(75, 192, 192, 1)',\n              borderWidth: 1\n            }]\n          },\n          options: {\n            scales: {\n              y: {\n                beginAtZero: true\n              }\n            }\n          }\n        });\n      } else {\n        console.error(\"Chart data or labels are missing.\");\n      }\n    }\n  }]);\n\n  return _default;\n}(Controller);\n\n_default.targets = [\"chart\"];\nexport { _default as default };","map":{"version":3,"sources":["/inss-discount-app/app/javascript/controllers/chart_controller.js"],"names":["Controller","Chart","console","log","chartTarget","element","labels","dataset","JSON","parse","data","length","ctx","getContext","type","datasets","label","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero","error","targets"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA,SAASA,UAAT,QAA2B,UAA3B;AACA,OAAOC,KAAP,MAAkB,eAAlB;;;;;;;;;;;;;;;WAKE,mBAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,WAAjB,EAA8B,KAAKC,OAAnC;AACA,UAAMC,MAAM,GAAG,KAAKD,OAAL,CAAaE,OAAb,CAAqBD,MAArB,GAA8BE,IAAI,CAACC,KAAL,CAAW,KAAKJ,OAAL,CAAaE,OAAb,CAAqBD,MAAhC,CAA9B,GAAwE,EAAvF;AACA,UAAMI,IAAI,GAAG,KAAKL,OAAL,CAAaE,OAAb,CAAqBG,IAArB,GAA4BF,IAAI,CAACC,KAAL,CAAW,KAAKJ,OAAL,CAAaE,OAAb,CAAqBG,IAAhC,CAA5B,GAAoE,EAAjF;;AAEA,UAAIJ,MAAM,CAACK,MAAP,IAAiBD,IAAI,CAACC,MAA1B,EAAkC;AAChC,YAAMC,GAAG,GAAG,KAAKR,WAAL,CAAiBS,UAAjB,CAA4B,IAA5B,CAAZ;AAEA,YAAIZ,KAAJ,CAAUW,GAAV,EAAe;AACbE,UAAAA,IAAI,EAAE,KADO;AAEbJ,UAAAA,IAAI,EAAE;AACJJ,YAAAA,MAAM,EAAEA,MADJ;AAEJS,YAAAA,QAAQ,EAAE,CAAC;AACTC,cAAAA,KAAK,EAAE,wBADE;AAETN,cAAAA,IAAI,EAAEA,IAFG;AAGTO,cAAAA,eAAe,EAAE,yBAHR;AAITC,cAAAA,WAAW,EAAE,uBAJJ;AAKTC,cAAAA,WAAW,EAAE;AALJ,aAAD;AAFN,WAFO;AAYbC,UAAAA,OAAO,EAAE;AACPC,YAAAA,MAAM,EAAE;AACNC,cAAAA,CAAC,EAAE;AACDC,gBAAAA,WAAW,EAAE;AADZ;AADG;AADD;AAZI,SAAf;AAoBD,OAvBD,MAuBO;AACLrB,QAAAA,OAAO,CAACsB,KAAR,CAAc,mCAAd;AACD;AACF;;;;EAlC0BxB,U;;SACpByB,O,GAAU,CAAC,OAAD,C","sourcesContent":["// app/javascript/controllers/chart_controller.js\nimport { Controller } from \"stimulus\";\nimport Chart from \"chart.js/auto\";\n\nexport default class extends Controller {\n  static targets = [\"chart\"];\n\n  connect() {\n    console.log(this.chartTarget, this.element)\n    const labels = this.element.dataset.labels ? JSON.parse(this.element.dataset.labels) : [];\n    const data = this.element.dataset.data ? JSON.parse(this.element.dataset.data) : [];\n\n    if (labels.length && data.length) {\n      const ctx = this.chartTarget.getContext(\"2d\");\n\n      new Chart(ctx, {\n        type: 'bar',\n        data: {\n          labels: labels,\n          datasets: [{\n            label: 'Número de Funcionários',\n            data: data,\n            backgroundColor: 'rgba(75, 192, 192, 0.2)',\n            borderColor: 'rgba(75, 192, 192, 1)',\n            borderWidth: 1\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true\n            }\n          }\n        }\n      });\n    } else {\n      console.error(\"Chart data or labels are missing.\");\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}